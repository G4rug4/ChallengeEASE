# -*- coding: utf-8 -*-
"""pruebatrabajo.ipynb

Automatically generated by Colaboratory.
Develop by G4rug4
Original file is located at
    https://colab.research.google.com/drive/1C-5luMeMtbXCipWVO61jfTo1Y6nTm1oM?usp=sharing
"""

import numpy as np

class mejor_ruta:
  def __init__(self):
    self.mapa=np.loadtxt('map.txt',skiprows=1)
    self.ruta=[]
    self.valorx=0
    self.valory=0
    self.altitud=0
    self.bajo=False
    self.encerrado=0
    self.encerradoHistorico=0
    self.ruta_mas_larga=[0,0]
    self.ruta_mas_enpinada=[0,0]
    self.posInicialX=0
    self.posInicialY=0


  def reposicionar(self):
    self.valorx=self.posInicialX
    self.valory=self.posInicialY


  def encontrar_maximo(self):
    self.altitud=self.mapa[self.valorx][self.valory]
    self.ruta.append(self.altitud)
    self.encerradoHistorico=self.encerradoHistorico+self.encerrado

  def hay_espacio_lados(self):
    forma= self.mapa.shape
    hayIzquierda=True
    hayDerecha=True
    if self.valory+1 == forma[0]:
      hayDerecha=False
    if self.valory == 0:
      hayIzquierda=False
    return hayIzquierda,hayDerecha

  def hay_espacio_abajo(self):
    forma= self.mapa.shape
    hayAbajo=True
    hayArriba=True
    if (self.valorx+1 == forma[1]):
      hayAbajo=False
    if (self.valorx == 0):
      hayArriba=False
    return hayAbajo, hayArriba

  def ver_lados(self):
    posibilidades={}
    ladoI,ladoD= self.hay_espacio_lados()
    ladoB,ladoA= self.hay_espacio_abajo()

    if ladoB:
      abajo=abs(self.altitud-self.mapa[self.valorx+1][self.valory])
      posibilidades['abajo']=abajo

    if ladoA:
      arriba=abs(self.altitud-self.mapa[self.valorx-1][self.valory])
      posibilidades['arriba']=arriba

    if ladoI:
      izquierda=abs(self.altitud-self.mapa[self.valorx][self.valory-1])
      posibilidades['izquierda']=izquierda

    if ladoD:
      derecha=abs(self.altitud-self.mapa[self.valorx][self.valory+1])
      posibilidades['derecha']=derecha

    if self.encerrado > 0:
      try:
        for i in range(self.encerrado):
          del posibilidades[min(posibilidades, key=posibilidades.get)]
      except:
        pass
        

    return posibilidades

  def mover(self, posx, posy):
    self.ruta=[]
    self.valorx= posx
    self.valory=posy
    self.posInicialX=posx
    self.posInicialY=posy
    self.encontrar_maximo()
    while (self.bajo==False):
      dicPosi=self.ver_lados()
      moviendo=True
      hayOpciones=len(dicPosi)
      while (moviendo):
        try:
          mejorDescenso = min(dicPosi, key=dicPosi.get)
          del dicPosi[mejorDescenso]
          if mejorDescenso=='arriba' and self.mapa[self.valorx-1][self.valory] < self.altitud:
            self.valorx=self.valorx-1
            self.altitud=self.mapa[self.valorx][self.valory]
            self.ruta.append(self.altitud)
            self.encerrado=0
            moviendo=False
          elif mejorDescenso=='abajo' and self.mapa[self.valorx+1][self.valory] < self.altitud:
            self.valorx=self.valorx+1
            self.altitud=self.mapa[self.valorx][self.valory]
            self.ruta.append(self.altitud)
            self.encerrado=0
            moviendo=False
          elif mejorDescenso=='izquierda' and self.mapa[self.valorx][self.valory-1] < self.altitud:
            self.valory=self.valory-1
            self.altitud=self.mapa[self.valorx][self.valory]
            self.ruta.append(self.altitud)
            self.encerrado=0
            moviendo=False
          elif mejorDescenso=='derecha' and self.mapa[self.valorx][self.valory+1] < self.altitud: 
            self.valory=self.valory+1
            self.altitud=self.mapa[self.valorx][self.valory]
            self.ruta.append(self.altitud)
            self.encerrado=0
            moviendo=False
        except :
          if (hayOpciones >0):
            self.encerrado=self.encerrado+1
            self.encerrado=self.encerrado+self.encerradoHistorico
            self.reposicionar()
            self.reinicio()
            moviendo=False
          else:
            self.bajo=True
            moviendo=False
            self.reposicionar()
            self.reinicio()
            self.encerrado=0
            self.encerradoHistorico=0

  def reinicio(self):
    descensoActual=self.ruta[0]-self.ruta[-1]
    mejorDescenso=self.ruta_mas_larga[0]-self.ruta_mas_larga[-1]
    if (len(self.ruta) > len(self.ruta_mas_larga)):
      self.ruta_mas_larga=self.ruta
    if (len(self.ruta) == len(self.ruta_mas_larga)):
      if (descensoActual > mejorDescenso):
        self.ruta_mas_larga=self.ruta
        self.ruta_mas_enpinada=self.ruta
    self.ruta=[]
    self.encontrar_maximo()

if __name__ =='__main__':
  La_mejor_ruta= mejor_ruta()
  for i in range(La_mejor_ruta.mapa.shape[0]):
    for j in range(La_mejor_ruta.mapa.shape[1]):
      La_mejor_ruta.bajo=False
      La_mejor_ruta.mover(i,j)

 
 
  print(f'La longitud de la ruta es la siguiente : {len(La_mejor_ruta.ruta_mas_larga)}')
  print(f'La ca√≠da de la ruta calculada es : {La_mejor_ruta.ruta_mas_larga[0] - La_mejor_ruta.ruta_mas_larga[-1]}')
  print(f'La ruta mas larga es  : {La_mejor_ruta.ruta_mas_larga}')